// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xbe, 0xf8, 0xbd, 0x6e, 0x86, 0xf9, 0xc9, 0xa2, 0x3b, 0xd5, 0x59, 0xae, 0x52, 0x45, 0xc8, 0x6, 0x76, 0xde, 0x62, 0xf, 0x88, 0x39, 0xcf, 0x55, 0x20, 0xb9, 0x97, 0x8f, 0x6f, 0x36, 0x1d, 0xa9, 0xb4, 0x8b, 0x5d, 0x1d, 0xe7, 0x78, 0x46, 0x16, 0x69, 0x97, 0x69, 0x8e, 0xd1, 0x48, 0x4d, 0xa2, 0x77, 0x61, 0x2b, 0xb0, 0x75, 0x34, 0xf, 0x8c, 0x85, 0x2a, 0xca, 0xbb, 0x89, 0x84, 0x5f, 0x92
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xdb, 0xcf, 0xdc, 0x56, 0xe0, 0xce, 0xad, 0xc0, 0xa, 0xe1, 0x6f, 0x99, 0x31, 0x77, 0xff, 0x32, 0x43, 0xee, 0x56, 0x3b, 0xb8, 0xf, 0xad, 0x6d, 0x42, 0xdd, 0xf3, 0xbd, 0xc, 0, 0x28, 0x98, 0xd2, 0xb8, 0x65, 0x7c, 0x86, 0x4f, 0x24, 0x73, 0x5e, 0xa3, 0x5a, 0xbc, 0xe0, 0x71, 0x75, 0xc4, 0x43, 0x4, 0x48, 0x82, 0x45, 0xc, 0x3e, 0xee, 0xb3, 0x4c, 0xac, 0x8a, 0xbc, 0xe0, 0x6e, 0xa1, 0x88, 0xc1, 0x8b, 0x5e, 0xb4, 0xcb, 0xfa, 0x93, 0xb, 0xe1, 0x6b, 0x99, 0x65, 0x70, 0xac, 0x64, 0x10, 0xec, 0x54, 0x69, 0xb8, 0xa, 0xab, 0x62, 0x42, 0xdd, 0xf2, 0xb7, 0xa, 0x50, 0x79, 0x98, 0xd1, 0xbc, 0x6b, 0x2d, 0xd5, 0x4e, 0x77, 0x2e, 0x5c, 0xa1, 0xd, 0xe8, 0xe4, 0x2d, 0x2b, 0x9a, 0x12, 0x5, 0x1a, 0x89, 0x46, 0x50, 0x3d, 0xbf, 0xb0, 0x1e, 0xf8, 0x88, 0xed, 0xb0, 0x6c, 0xf4
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "e7a8f7db1467c274504406b8bdd2c651f38aa7be7432198f4ec2081b6ff15d1369602231042775dbf26f03d7bde8efd1e760261856df5ef8ed193d235423d43f")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xdd, 0x8d, 0xe4, 0x2c, 0xd6, 0x97, 0xfa, 0xda, 0x76, 0xec, 0xd, 0xe5, 0x21, 0xa, 0xae, 0x49, 0x1b, 0xbf, 0x33, 0x63, 0xc6, 0x43, 0xf7, 0x7e, 0x76, 0xc0, 0xdc, 0xfd, 0x1f, 0x5b, 0x76, 0xc1, 0xdf, 0xea, 0x2a, 0x36, 0x94, 0x30, 0x2, 0x26, 0x46, 0xc0, 0x3f, 0xc7, 0xbf, 0x2b, 0x26, 0x96, 0x24, 0x11, 0x1d, 0x9f, 0x21, 0x7c, 0x37, 0xe5, 0xe6, 0x1a, 0x83, 0xdf, 0xb8, 0xe5, 0xc, 0xd7, 0xfd, 0x8a, 0xc4, 0x23, 0xb7, 0xae, 0xfd, 0xe7, 0x48, 0xbe, 0x6b, 0x9a, 0x2a, 0x77, 0xb9, 0x31, 0x45, 0x84, 0x16, 0x61, 0xb9, 0x78, 0xf2, 0x68
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "cuYBPn3xM9TKsOfOmaQlNz8+VyKrpmkhkaw+sHD0/WVInck4Sp6/TH8ic0Id1aSECryM1W4Esk24x2q73Ztn1A==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x89, 0xc0, 0xd8, 0x5d, 0xe7, 0x9b, 0xad, 0xc3, 0x16, 0xb1, 0x6d, 0x9f, 0x33, 0x68, 0xfc, 0x63, 0x40, 0xbd, 0x4f, 0x37, 0xbe, 0x5b, 0xfc, 0x78, 0x13, 0xdf, 0xf5, 0xea, 0x5d, 0xe, 0x7b, 0xc8, 0xd7, 0xbf, 0x3f, 0x2a
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "78e3abda-d41a-4e6c-86b3-3fbe28fac4b7")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xca, 0x8a, 0xc8, 0xb
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xd8, 0x99, 0xd1, 0x1d, 0xe3
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x8a, 0xca
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x8e, 0xc8, 0x8d, 0x5f
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x87, 0xca, 0x8f, 0x5d, 0xb5, 0xce, 0xfb, 0x92, 0x8, 0xe3, 0x61, 0x9b, 0x66, 0x72, 0xff, 0x33, 0x4e, 0xee, 0x55, 0x36, 0xba, 0xb, 0xfc, 0x66, 0x17, 0x8b, 0xa7, 0xbc, 0x59, 0xe, 0x28, 0x9d, 0x83, 0xbc, 0x68, 0x25, 0xd7, 0x4f
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x93, 0xcc, 0x8f
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x8d, 0xd6, 0x8c, 0x5a
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xcc, 0x9d, 0xdc, 0x2, 0xd9, 0xdd, 0xa5, 0xcb, 0x56, 0x8a, 0x2a, 0xc6, 0x33, 0x21, 0xb1
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
